paths:
  /api/products/:
    get:
      summary: "return all products"
      tags:
        - products
      responses:
        "200":
          description: "ok"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/product"
        "500":
          description: "internal server error"
    post:
      summary: "create product"
      tags:
        - products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/create_product"
      responses:
        "201":
          description: "product created"
        "400":
          description: "invalid request"
        "401":
          description: "unauthorized"
        "403":
          description: "forbidden"
        "500":
          description: "internal server error"
    delete:
      summary: "delete all products"
      tags:
        - products
      responses:
        "200":
          description: "all products removed"
        "401":
          description: "unauthorized"
        "403":
          description: "forbidden"
        "500":
          description: "internal server error"

  /api/products/{id}:
    get:
      summary: "find product by id"
      tags:
        - products
      parameters:
      - name: id
        in: path
        required: true
        description: "product id"
        schema:
          $type: String
      responses:
        "200":
          description: "ok"
          content:
            application/json:
              schema:
                $ref: "#components/schemas/product"
        "404":
          description: "product not found"
        "500":
          description: "internal server error"
    patch:
      summary: "updates product partially"
      tags:
        - products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/update_product"
      parameters:
      - name: id
        in: path
        required: true
        description: "product id"
        schema:
          $type: String
      responses:
        "200":
          description: "product updated"
        "401":
          description: "unauthorized"
        "403":
          description: "forbidden"
        "500":
          description: "internal server error"
    put:
      summary: "updates all product data"
      tags:
        - products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/update_product"
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $type: String
      responses:
        "200":
          description: "product updated"
        "401":
          description: "unauthorized"
        "403":
          description: "forbidden"
        "500":
          description: "internal server error"

    delete:
      summary: "delete a specific product"
      tags:
        - products
      parameters:
      - name: id
        in: path
        required: true
        description: "product id"
        schema:
          $type: String
      responses:
        "200":
          description: "product removed"
        "401":
          description: "unauthorized"
        "403":
          description: "forbidden"
        "404":
          description: "product not found"
        "500":
          description: "internal server error"

components:
  schemas:
    product:
      type: object
      properties:
        _id:
          type: Objectid
          description: "autogenerated mongo id"
        title:
          type: String
          description: "product name"
        description:
          type: String
          description: "product description"
        category:
          type: String
          description: "product category"
        thumbnails:
          type: Array
          description: "product thumbnails"
        stock:
          type: Number
          description: "product stock"
        price:
          type: Number
          description: "product price"
        code:
          type: String
          description: "product code"
        status:
          type: Boolean
          description: "product status"
        owner:
          type: String
          description: "product owner"
      example:
        _id: Objectid("6463ee0ab68ed949c1a32600")
        title: "porsche 911"
        description: "high performance model"
        category: "sports car"
        thumbnails: []
        stock: 0
        price: 0.99
        code: "7xk13df87sa0lp3"
        status: true
        owner: "testing@gmail.com"

  requestBodies:
    create_product:
      type: object
      properties:
        title:
          type: String
          description: "product name"
        description:
          type: String
          description: "product description"
        category:
          type: String
          description: "product category"
        thumbnails:
          type: Array
          description: "product thumbnails"
        stock:
          type: Number
          description: "product stock"
        price:
          type: Number
          description: "product price"
        code:
          type: String
          description: "product code"
        status:
          type: Boolean
          description: "product status"
        owner:
          type: String
          description: "product owner"
      example:
        title: "porsche 911"
        description: "high performance model"
        category: "sports car"
        thumbnails: []
        stock: 0
        price: 0.99
        code: "7xk13df87sa0lp3"
        status: true
        owner: "testing@gmail.com"

    update_product:
      type: object
      properties:
        title:
          type: String
          description: "product name"
        description:
          type: String
          description: "product description"
        category:
          type: String
          description: "product category"
        thumbnails:
          type: Array
          description: "product thumbnails"
        stock:
          type: Number
          description: "product stock"
        price:
          type: Number
          description: "product price"
        code:
          type: String
          description: "product code"
        status:
          type: Boolean
          description: "product status"
        owner:
          type: String
          description: "product owner"
      example:
        title: "porsche 911"
        description: "high performance model"
        category: "sports car"
        thumbnails: []
        stock: 0
        price: 0.99
        code: "7xk13df87sa0lp3"
        status: true
        owner: "testing@gmail.com"